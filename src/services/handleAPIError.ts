import { Alert } from "react-native";

let isAlertShown = false; // ðŸ”¹ VariÃ¡vel para evitar mÃºltiplos alertas em requisiÃ§Ãµes concorrentes

interface HandleAPIErrorOptions {
  silent?: boolean; // ðŸ”¹ Permite desativar alertas em chamadas especÃ­ficas
}

/**
 * Trata erros genÃ©ricos de requisiÃ§Ã£o da API.
 *
 * @param error - O erro capturado pela requisiÃ§Ã£o Axios.
 * @param options - OpÃ§Ãµes para personalizar o tratamento do erro.
 */
function handleAPIError(error: any, options: HandleAPIErrorOptions = {}) {
  if (options.silent) return; // ðŸ”¹ Se `silent` for true, nÃ£o exibe alertas.

  let message = "Ocorreu um erro inesperado.";

  if (error.response) {
    // ðŸ”¹ O servidor respondeu com um erro HTTP
    const { status, data } = error.response;
    message = data?.Msg || data?.message || data?.error || `Erro ${status}: Ocorreu um problema na requisiÃ§Ã£o.`;

    if (status >= 400 && status < 500) {
      showAlert("Erro de SolicitaÃ§Ã£o", message);
    } else if (status >= 500) {
      showAlert("Erro no Servidor", message);
    }
  } else if (error.request) {
    // ðŸ”¹ A requisiÃ§Ã£o foi feita, mas nÃ£o houve resposta (problema de rede, timeout, servidor offline)
    if (error.code === "ECONNABORTED") {
      message = "A solicitaÃ§Ã£o expirou. Tente novamente.";
    } else if (error.message.includes("Network Error")) {
      message = "Erro de conexÃ£o. Verifique sua internet, a URL da empresa e as configuraÃ§Ãµes da API.";
    } else {
      message = "O servidor nÃ£o respondeu. Tente novamente mais tarde.";
    }

    showAlert("Erro de ConexÃ£o", message);
  } else if (error.message) {
    // ðŸ”¹ Erros internos do JavaScript, como problemas de configuraÃ§Ã£o do Axios
    if (error.message === "canceled") {
      console.warn("RequisiÃ§Ã£o cancelada pelo usuÃ¡rio.");
      return;
    }

    showAlert("Erro Desconhecido", error.message);
  } else {
    // ðŸ”¹ Erro inesperado
    showAlert("Erro", "Algo deu errado. Por favor, tente novamente.");
  }
}

/**
 * Exibe um alerta de erro, garantindo que nÃ£o haja mÃºltiplos alertas simultÃ¢neos.
 */
function showAlert(title: string, message: string) {
  if (!isAlertShown) {
    isAlertShown = true;
    Alert.alert(title, message, [{ text: "OK", onPress: () => (isAlertShown = false) }]);
  }
}

export { handleAPIError };
